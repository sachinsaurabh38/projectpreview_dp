/*Copyright (c) 2019-2020 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.dmpprofiles.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.security.xss.XssDisable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.fico.dmp.dmpprofiles.FawbPropertySource;
import com.fico.dmp.dmpprofiles.service.FawbPropertySourceService;


/**
 * Controller object for domain model class FawbPropertySource.
 * @see FawbPropertySource
 */
@RestController("dmpprofiles.FawbPropertySourceController")
@Api(value = "FawbPropertySourceController", description = "Exposes APIs to work with FawbPropertySource resource.")
@RequestMapping("/dmpprofiles/FawbPropertySource")
public class FawbPropertySourceController {

    private static final Logger LOGGER = LoggerFactory.getLogger(FawbPropertySourceController.class);

    @Autowired
	@Qualifier("dmpprofiles.FawbPropertySourceService")
	private FawbPropertySourceService fawbPropertySourceService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new FawbPropertySource instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public FawbPropertySource createFawbPropertySource(@RequestBody FawbPropertySource fawbPropertySource) {
		LOGGER.debug("Create FawbPropertySource with information: {}" , fawbPropertySource);

		fawbPropertySource = fawbPropertySourceService.create(fawbPropertySource);
		LOGGER.debug("Created FawbPropertySource with information: {}" , fawbPropertySource);

	    return fawbPropertySource;
	}

    @ApiOperation(value = "Returns the FawbPropertySource instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public FawbPropertySource getFawbPropertySource(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting FawbPropertySource with id: {}" , id);

        FawbPropertySource foundFawbPropertySource = fawbPropertySourceService.getById(id);
        LOGGER.debug("FawbPropertySource details with id: {}" , foundFawbPropertySource);

        return foundFawbPropertySource;
    }

    @ApiOperation(value = "Updates the FawbPropertySource instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public FawbPropertySource editFawbPropertySource(@PathVariable("id") Integer id, @RequestBody FawbPropertySource fawbPropertySource) {
        LOGGER.debug("Editing FawbPropertySource with id: {}" , fawbPropertySource.getId());

        fawbPropertySource.setId(id);
        fawbPropertySource = fawbPropertySourceService.update(fawbPropertySource);
        LOGGER.debug("FawbPropertySource details with id: {}" , fawbPropertySource);

        return fawbPropertySource;
    }

    @ApiOperation(value = "Deletes the FawbPropertySource instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteFawbPropertySource(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting FawbPropertySource with id: {}" , id);

        FawbPropertySource deletedFawbPropertySource = fawbPropertySourceService.delete(id);

        return deletedFawbPropertySource != null;
    }

    /**
     * @deprecated Use {@link #findFawbPropertySources(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of FawbPropertySource instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<FawbPropertySource> searchFawbPropertySourcesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering FawbPropertySources list by query filter:{}", (Object) queryFilters);
        return fawbPropertySourceService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of FawbPropertySource instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<FawbPropertySource> findFawbPropertySources(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering FawbPropertySources list by filter:", query);
        return fawbPropertySourceService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of FawbPropertySource instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Page<FawbPropertySource> filterFawbPropertySources(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering FawbPropertySources list by filter", query);
        return fawbPropertySourceService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public Downloadable exportFawbPropertySources(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return fawbPropertySourceService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @XssDisable
    public StringWrapper exportFawbPropertySourcesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = FawbPropertySource.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> fawbPropertySourceService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of FawbPropertySource instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Long countFawbPropertySources( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting FawbPropertySources");
		return fawbPropertySourceService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	@XssDisable
	public Page<Map<String, Object>> getFawbPropertySourceAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return fawbPropertySourceService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service FawbPropertySourceService instance
	 */
	protected void setFawbPropertySourceService(FawbPropertySourceService service) {
		this.fawbPropertySourceService = service;
	}

}