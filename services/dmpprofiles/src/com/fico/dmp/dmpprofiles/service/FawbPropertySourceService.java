/*Copyright (c) 2019-2020 fico.com All Rights Reserved.
 This software is the confidential and proprietary information of fico.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with fico.com*/
package com.fico.dmp.dmpprofiles.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.fico.dmp.dmpprofiles.FawbPropertySource;

/**
 * Service object for domain model class {@link FawbPropertySource}.
 */
public interface FawbPropertySourceService {

    /**
     * Creates a new FawbPropertySource. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on FawbPropertySource if any.
     *
     * @param fawbPropertySource Details of the FawbPropertySource to be created; value cannot be null.
     * @return The newly created FawbPropertySource.
     */
    FawbPropertySource create(@Valid FawbPropertySource fawbPropertySource);


	/**
     * Returns FawbPropertySource by given id if exists.
     *
     * @param fawbpropertysourceId The id of the FawbPropertySource to get; value cannot be null.
     * @return FawbPropertySource associated with the given fawbpropertysourceId.
	 * @throws EntityNotFoundException If no FawbPropertySource is found.
     */
    FawbPropertySource getById(Integer fawbpropertysourceId);

    /**
     * Find and return the FawbPropertySource by given id if exists, returns null otherwise.
     *
     * @param fawbpropertysourceId The id of the FawbPropertySource to get; value cannot be null.
     * @return FawbPropertySource associated with the given fawbpropertysourceId.
     */
    FawbPropertySource findById(Integer fawbpropertysourceId);

	/**
     * Find and return the list of FawbPropertySources by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param fawbpropertysourceIds The id's of the FawbPropertySource to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return FawbPropertySources associated with the given fawbpropertysourceIds.
     */
    List<FawbPropertySource> findByMultipleIds(List<Integer> fawbpropertysourceIds, boolean orderedReturn);


    /**
     * Updates the details of an existing FawbPropertySource. It replaces all fields of the existing FawbPropertySource with the given fawbPropertySource.
     *
     * This method overrides the input field values using Server side or database managed properties defined on FawbPropertySource if any.
     *
     * @param fawbPropertySource The details of the FawbPropertySource to be updated; value cannot be null.
     * @return The updated FawbPropertySource.
     * @throws EntityNotFoundException if no FawbPropertySource is found with given input.
     */
    FawbPropertySource update(@Valid FawbPropertySource fawbPropertySource);

    /**
     * Deletes an existing FawbPropertySource with the given id.
     *
     * @param fawbpropertysourceId The id of the FawbPropertySource to be deleted; value cannot be null.
     * @return The deleted FawbPropertySource.
     * @throws EntityNotFoundException if no FawbPropertySource found with the given id.
     */
    FawbPropertySource delete(Integer fawbpropertysourceId);

    /**
     * Deletes an existing FawbPropertySource with the given object.
     *
     * @param fawbPropertySource The instance of the FawbPropertySource to be deleted; value cannot be null.
     */
    void delete(FawbPropertySource fawbPropertySource);

    /**
     * Find all FawbPropertySources matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching FawbPropertySources.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<FawbPropertySource> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all FawbPropertySources matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching FawbPropertySources.
     *
     * @see Pageable
     * @see Page
     */
    Page<FawbPropertySource> findAll(String query, Pageable pageable);

    /**
     * Exports all FawbPropertySources matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all FawbPropertySources matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the FawbPropertySources in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the FawbPropertySource.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}